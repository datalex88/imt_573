area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
#function to return upper case
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
#function to return upper case
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
max(a)
#function to return upper case
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
max(a)
#function to return upper case
toupper(s)
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
max(a)
#function to return upper case
toupper("s")
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# creating a dataframe by passing vectors to the `data.frame()` function
# a vector of names
name <- c("Alice", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
heights <- c(5.5, 6, 5.3, 5.8, 5.9)
weights <- c(100, 170, 150, 120, 155)
#Combine the vectors into a data frame
# Note the names of the variables become the names of the columns in the dataframe
people <- data.frame(name, heights, weights)
# to create row.names
people2 <- data.frame(name, heights, weights, row.names = 1)
# YOUR TURN
# build an employee data frame of 5 employees with 3 columns: income, manager (T/F), empid
name2 <- c("Alex", "Anna", "Jean", "Zack", "Daniel")
income <- c(2200, 2300, 5400, 6800, 10000)
manager <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
empid <- c(1:5)
employees <- data.frame(name2, income, manager, empid)
employees
# creating a dataframe by passing vectors to the `data.frame()` function
# a vector of names
name <- c("Alice", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
heights <- c(5.5, 6, 5.3, 5.8, 5.9)
weights <- c(100, 170, 150, 120, 155)
#Combine the vectors into a data frame
# Note the names of the variables become the names of the columns in the dataframe
people <- data.frame(name, heights, weights)
# to create row.names
people2 <- data.frame(name, heights, weights, row.names = 1)
# YOUR TURN
# build an employee data frame of 5 employees with 3 columns: income, manager (T/F), empid
name2 <- c("Alex", "Anna", "Jean", "Zack", "Daniel")
income <- c(2200, 2300, 5400, 6800, 10000)
manager <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
empid <- c(1:5)
employees <- data.frame(name2, income, manager, empid)
print(employees)
# creating a dataframe by passing vectors to the `data.frame()` function
# a vector of names
name <- c("Alice", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
heights <- c(5.5, 6, 5.3, 5.8, 5.9)
weights <- c(100, 170, 150, 120, 155)
#Combine the vectors into a data frame
# Note the names of the variables become the names of the columns in the dataframe
people <- data.frame(name, heights, weights)
# to create row.names
people2 <- data.frame(name, heights, weights, row.names = 1)
# YOUR TURN
# build an employee data frame of 5 employees with 3 columns: income, manager (T/F), empid
name2 <- c("Alex", "Anna", "Jean", "Zack", "Daniel")
income <- c(2200, 2300, 5400, 6800, 10000)
manager <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
empid <- c(1:5)
employees <- data.frame(name2, income, manager, empid)
head(employees)
View(employees)
# elements by row and column name
people2['Alice', 'heights']
#read titanic.csv data. Download data from Canvas
data <- read.csv('titanic.csv')
cwd()_
cwd()
cwd
setwd("~/Documents/uw/imt_573/labs")
library(tinytex)
install.packages("latexpdf")
library(latexpdf)
install.packages("csvread")
library(csvread)
# Hello R!
# This is a code comment.
# Code comments help you document your coding proces!
#This is a code chunk named "our first code chunk", which is the name of the code chunk;
# Including code chunk name is optional, but this practice will help you create well documented code
1 + 3		# evaluation
a <- 3	# assignment. <- is the assignment symbol
a				# evaluation
a<-3		# spacing does not matter
a    <-    3		# spacing does not matter
sqrt(a)			# use the square root function
b <- sqrt(a)		# use function and save result
b
# x				# evaluate something that is not there
a == b			# is a equal to b?
a != b			# is a not equal to b?
# list objects in the R environment
# (same as viewing the "Workspace" pane in RStudio)
ls()
rm(a)			# remove a single object
rm(list=ls())		# remove everything from the environment
# get help with R generally
# (same as viewing the "Help" pane in RStudio)
help.start()
# More targeted help
?sqrt			# get specific help for a function
apropos("sq")		# regular expression match. What do you do when you can't really recall the exact function name
# Check the type of data contained in a variable with the class function.
x <- 3
x
class(x)
# Numeric data type -- Testing whether a variable is numeric
a <- 45
a
class(a)
# Character data
b <- "b"
b
class(b)
# Date type -- Dealing with dates and times can be difficult in any language, and to further complicate matters R has numerous different types of dates.
c <- Sys.Date()
c
class(c)
# Logical data type: True/False
d <- FALSE
d
class(d)
# Factor vectors: Ideal for representing categorical variables (More on that later)
vect <- c(1:10)
class(vect)
# Creating vectors using c() function or the "combine" operator
a <- c(1,3,5,7)
a
# select the second element
a[2]
# also works with strings. let's see how.
b <- c("red","green","blue","purple")
b
# all colors except blue
b <- c("red","green","blue","purple")
b[-3]
#all numbers less than 5
a <- c(1,3,5,7)
a[-3]
#add a new element
b[5] <- "yellow"
#change the first element
b[1] <- "gold"
# combine by applying recursively
a <- c(a,a)
# mixing types---what happens?
c <- c(a,b)
c
# Sequences and replication
#creating a vector using sequence. sequence from 1 to 5
a <- seq(from=1,to=5,by=1)
b <- 1:5					# a shortcut!
#creating a vector using sequence. sequence from 1 to 10, steps of 2
a <- seq(from=1,to=10,by=2)
# replicate elements of a vector
rep(1,times=3)
# Any, all, and which (with vectors)
rep(1:10,times=3)
# How long is the vector?
length(a)
# Most arithmetic operators are applied element-wise:
a <- 1:5		# create a vector
a + 1		# addition
#vector of numbers
nums <- c(3.98, 8.2, 10.5, 3.6, 5.5)
round(nums, 1) # round to nearest whole number or number of decimal places, if specified
# create a matrix the "formal" way...
a <- matrix(1:25, nrow=5, ncol = 5)
a
# A character vector of shirt sizes
shirt_sizes <- c('small', 'medium', 'small', 'large', 'medium', 'medium')
# YOUR TURN:
# Create a factor variable education that has four categories: "High School", "College", "Masters", "Doctorate"
education <- c("High School", "College", "Masters", "Doctorate")
degree <- factor(education, ordered = TRUE)
degree
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
max(a)
#function to return upper case
toupper("s")
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# creating a dataframe by passing vectors to the `data.frame()` function
# a vector of names
name <- c("Alice", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
heights <- c(5.5, 6, 5.3, 5.8, 5.9)
weights <- c(100, 170, 150, 120, 155)
#Combine the vectors into a data frame
# Note the names of the variables become the names of the columns in the dataframe
people <- data.frame(name, heights, weights)
# to create row.names
people2 <- data.frame(name, heights, weights, row.names = 1)
# YOUR TURN
# build an employee data frame of 5 employees with 3 columns: income, manager (T/F), empid
name2 <- c("Alex", "Anna", "Jean", "Zack", "Daniel")
income <- c(2200, 2300, 5400, 6800, 10000)
manager <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
empid <- c(1:5)
employees <- data.frame(name2, income, manager, empid)
employees
# elements by row and column name
people2['Alice', 'heights']
#read titanic.csv data. Download data from Canvas
data <- read.csv('titanic.csv')
# Hello R!
# This is a code comment.
# Code comments help you document your coding proces!
#This is a code chunk named "our first code chunk", which is the name of the code chunk;
# Including code chunk name is optional, but this practice will help you create well documented code
1 + 3		# evaluation
a <- 3	# assignment. <- is the assignment symbol
a				# evaluation
a<-3		# spacing does not matter
a    <-    3		# spacing does not matter
sqrt(a)			# use the square root function
b <- sqrt(a)		# use function and save result
b
# x				# evaluate something that is not there
a == b			# is a equal to b?
a != b			# is a not equal to b?
# list objects in the R environment
# (same as viewing the "Workspace" pane in RStudio)
ls()
rm(a)			# remove a single object
rm(list=ls())		# remove everything from the environment
# get help with R generally
# (same as viewing the "Help" pane in RStudio)
help.start()
# More targeted help
?sqrt			# get specific help for a function
apropos("sq")		# regular expression match. What do you do when you can't really recall the exact function name
# Check the type of data contained in a variable with the class function.
x <- 3
x
class(x)
# Numeric data type -- Testing whether a variable is numeric
a <- 45
a
class(a)
# Character data
b <- "b"
b
class(b)
# Date type -- Dealing with dates and times can be difficult in any language, and to further complicate matters R has numerous different types of dates.
c <- Sys.Date()
c
class(c)
# Logical data type: True/False
d <- FALSE
d
class(d)
# Factor vectors: Ideal for representing categorical variables (More on that later)
vect <- c(1:10)
class(vect)
# Creating vectors using c() function or the "combine" operator
a <- c(1,3,5,7)
a
# select the second element
a[2]
# also works with strings. let's see how.
b <- c("red","green","blue","purple")
b
# all colors except blue
b <- c("red","green","blue","purple")
b[-3]
#all numbers less than 5
a <- c(1,3,5,7)
a[-3]
#add a new element
b[5] <- "yellow"
#change the first element
b[1] <- "gold"
# combine by applying recursively
a <- c(a,a)
# mixing types---what happens?
c <- c(a,b)
c
# Sequences and replication
#creating a vector using sequence. sequence from 1 to 5
a <- seq(from=1,to=5,by=1)
b <- 1:5					# a shortcut!
#creating a vector using sequence. sequence from 1 to 10, steps of 2
a <- seq(from=1,to=10,by=2)
# replicate elements of a vector
rep(1,times=3)
# Any, all, and which (with vectors)
rep(1:10,times=3)
# How long is the vector?
length(a)
# Most arithmetic operators are applied element-wise:
a <- 1:5		# create a vector
a + 1		# addition
#vector of numbers
nums <- c(3.98, 8.2, 10.5, 3.6, 5.5)
round(nums, 1) # round to nearest whole number or number of decimal places, if specified
# create a matrix the "formal" way...
a <- matrix(1:25, nrow=5, ncol = 5)
a
# A character vector of shirt sizes
shirt_sizes <- c('small', 'medium', 'small', 'large', 'medium', 'medium')
# YOUR TURN:
# Create a factor variable education that has four categories: "High School", "College", "Masters", "Doctorate"
education <- c("High School", "College", "Masters", "Doctorate")
degree <- factor(education, ordered = TRUE)
degree
# call the sqrt() function, passing it an argument of 25
sqrt(25)
# call the print function, passing it "IMT 573" as an argument
print("IMT 573")
#printing using cat function
cat("value = ", a)
#min and max function taking multiple arguments
min(a)
max(a)
#function to return upper case
toupper("s")
#Write a function of your name. Let's see how it works through an example
#write a function to combine first and last name
make_fullname <- function(firstname, lastname) {
# function body
fullname <- paste(firstname, lastname)
#return the value
return(fullname)
}
#call the function
some_name = make_fullname('John', 'Doe')
### R functions: YOUR TURN - TODO
### Write a function to calculate area of a rectangle
rectangle_area <- function(x, y) {
area <- x * y
return(area)
}
some_area = rectangle_area(2, 2)
some_area
# creating a dataframe by passing vectors to the `data.frame()` function
# a vector of names
name <- c("Alice", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
heights <- c(5.5, 6, 5.3, 5.8, 5.9)
weights <- c(100, 170, 150, 120, 155)
#Combine the vectors into a data frame
# Note the names of the variables become the names of the columns in the dataframe
people <- data.frame(name, heights, weights)
# to create row.names
people2 <- data.frame(name, heights, weights, row.names = 1)
# YOUR TURN
# build an employee data frame of 5 employees with 3 columns: income, manager (T/F), empid
name2 <- c("Alex", "Anna", "Jean", "Zack", "Daniel")
income <- c(2200, 2300, 5400, 6800, 10000)
manager <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
empid <- c(1:5)
employees <- data.frame(name2, income, manager, empid)
employees
# elements by row and column name
people2['Alice', 'heights']
#read titanic.csv data. Download data from Canvas
data <- read.csv('titanic.csv')
knitr::opts_chunk$set(echo = TRUE)
#read titanic.csv data. Download data from Canvas
data <- read.csv('titanic.csv')
#check the type of data
typeof(data)
#check additional structure and type in the data
# inspect the data - look at top and bottom
head(data)
tail(data)
